package emerald;

/*
 *
 * Autogenerated by Lua script
 * Script written by TheWaffleDimension
 *
 */


import java.util.List;

import emerald.Expr.Visitor;

abstract class Expr {
	/**
	 * Visitor interface
	 * @param <R> The type that should be returned visiting expressions
	 */
	interface Visitor<R> {
		R visitGroupingExpr(Grouping expr);
		R visitLiteralExpr(Literal expr);
		R visitVariableExpr(Variable expr);
		R visitUnaryExpr(Unary expr);
		R visitAssignExpr(Assign expr);
		R visitBinaryExpr(Binary expr);
		R visitFixExpr(Fix expr);
		R visitCallExpr(Call call);
	}

	static class Grouping extends Expr {
		final Expr expression;

		Grouping(Expr expression) {
			this.expression = expression;
		}

		<R> R accept(Visitor<R> visitor) {
			return visitor.visitGroupingExpr(this);
		}
	}


	static class Literal extends Expr {
		final Object value;

		Literal(Object value) {
			this.value = value;
		}

		<R> R accept(Visitor<R> visitor) {
			return visitor.visitLiteralExpr(this);
		}
	}


	static class Variable extends Expr {
		final Token name;

		Variable(Token name) {
			this.name = name;
		}

		<R> R accept(Visitor<R> visitor) {
			return visitor.visitVariableExpr(this);
		}
	}


	static class Unary extends Expr {
		final Token operator;
		final Expr right;

		Unary(Token operator, Expr right) {
			this.operator = operator;
			this.right = right;
		}

		<R> R accept(Visitor<R> visitor) {
			return visitor.visitUnaryExpr(this);
		}
	}
	
	/**
	 * Prefix and Postfix
	 */
	static class Fix extends Expr {
		final Token operator;
		final Token target;
		final Boolean prefix;

		Fix(Token operator, Token target, Boolean prefix) {
			this.operator = operator;
			this.target = target;
			this.prefix = prefix;
		}

		<R> R accept(Visitor<R> visitor) {
			return visitor.visitFixExpr(this);
		}
	}

	static class Assign extends Expr {
		final Token name;
		final Expr value;

		Assign(Token name, Expr value) {
			this.name = name;
			this.value = value;
		}

		<R> R accept(Visitor<R> visitor) {
			return visitor.visitAssignExpr(this);
		}
	}


	static class Binary extends Expr {
		final Expr left;
		final Token operator;
		final Expr right;

		Binary(Expr left, Token operator, Expr right) {
			this.left = left;
			this.operator = operator;
			this.right = right;
		}

		<R> R accept(Visitor<R> visitor) {
			return visitor.visitBinaryExpr(this);
		}
	}

	static class Call extends Expr {
		final String name;
		final List<Expr> arguments;

		Call(String name, List<Expr> arguments) {
			this.name = name;
			this.arguments =  arguments;
		}

		<R> R accept(Visitor<R> visitor) {
			return visitor.visitCallExpr(this);
		}
	}

	/**
	 * Forces {@literal visitor} to visit this expression
	 * @param visitor The visitor to visit this expression
	 * @return The type of value that this expression should resolve to
	 */
	abstract <R> R accept(Visitor<R> visitor);
}
