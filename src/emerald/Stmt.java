package emerald;

/*
 *
 * Autogenerated by Lua script
 * Script written by TheWaffleDimension
 *
 */


import java.util.List;

import emerald.Expr.Visitor;
import emerald.Interpreter.ReturnThrow;

abstract class Stmt {
	interface Visitor<R> {
		R visitExpressionStmt(Expression stmt);
		R visitBlockStmt(Block stmt) throws ReturnThrow;
		R visitVarStmt(Var stmt);
		R visitIfStmt(If stmt) throws ReturnThrow;
		void visitReturnStmt(Return stmt) throws ReturnThrow;
		void visitPrintStmt(Expr value);
		void visitFunctionStmt(Func func);
	}

	static class Expression extends Stmt {
		final Expr expression;

		Expression(Expr expression) {
			this.expression = expression;
		}

		<R> R accept(Visitor<R> visitor) {
			return visitor.visitExpressionStmt(this);
		}
	}

	static class Print extends Stmt {
		final Expr value;
		
		Print(Expr value) {
			this.value = value;
		}
		
		<R> R accept(Visitor<R> visitor) {
			visitor.visitPrintStmt(value);
			return null;
		}
	}
	
	static class Return extends Stmt {
		final Expr value;
		
		Return(Expr value) {
			this.value = value;
		}
		
		<R> R accept(Visitor<R> visitor) throws ReturnThrow {
			visitor.visitReturnStmt(this);
			return null;
		}
	}

	static class Block extends Stmt {
		final List<Stmt> statements;

		Block(List<Stmt> statements) {
			this.statements = statements;
		}

		<R> R accept(Visitor<R> visitor) throws ReturnThrow {
			return visitor.visitBlockStmt(this);
		}
	}

	static class Func extends Stmt {
		final String name;
		final List<String> arguments;
		final Block body;

		Func(String name, List<String> arguments, Block body) {
			this.name = name;
			this.arguments =  arguments;
			this.body = body;
		}

		<R> R accept(Visitor<R> visitor) {
			visitor.visitFunctionStmt(this);
			return null;
		}
	}

	static class Var extends Stmt {
		final Token identifier;
		final Expr value;
		final boolean global;

		Var(Token identifier, Expr value, boolean global) {
			this.identifier = identifier;
			this.value = value;
			this.global = global;
		}

		<R> R accept(Visitor<R> visitor) {
			return visitor.visitVarStmt(this);
		}
	}


	static class If extends Stmt {
		final Expr condition;
		final Stmt trueBody;
		final Stmt falseBody;

		If(Expr condition, Stmt trueBody, Stmt falseBody) {
			this.condition = condition;
			this.trueBody = trueBody;
			this.falseBody = falseBody;
		}

		<R> R accept(Visitor<R> visitor) throws ReturnThrow {
			return visitor.visitIfStmt(this);
		}
	}

	abstract <R> R accept(Visitor<R> visitor) throws ReturnThrow;
}
